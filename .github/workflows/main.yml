name: Remove BG (batch → MP4 nền xanh, no-audio, full)

on:
  workflow_dispatch:
    inputs:
      FPS:
        description: "FPS xử lý (24/25/30)"
        required: false
        default: "30"
      MAX_FILES:
        description: "Số video đầu tiên trong INPUT/ cần xử lý (0 = tất cả)"
        required: false
        default: "0"
      CLOSE_PASSES:
        description: "Đóng lỗ alpha (dilation→erosion) bao nhiêu lần? (1–2 đề xuất)"
        required: false
        default: "1"
      ERODE_PASSES:
        description: "Co viền alpha (erosion) để giảm lem (0–2)"
        required: false
        default: "1"
      FEATHER:
        description: "Feather (làm mượt alpha) theo px (0–2)"
        required: false
        default: "1"

jobs:
  remove_bg:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        run: |
          mkdir -p INPUT OUT .work
          echo "[INFO] Đặt video nguồn vào thư mục INPUT/ (mp4/mov/mkv/avi/webm)."

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Torch + BackgroundRemover
        run: |
          python -m pip install --upgrade pip
          python -m pip install --index-url https://download.pytorch.org/whl/cpu torch torchvision torchaudio
          python -m pip install backgroundremover==0.3.4

      - name: Cache Torch & Models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/torch
            ~/.cache/backgroundremover
            ~/.u2net
          key: bgrem-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}

      - name: Batch process INPUT/* in order (pin u2net_human_seg + alpha-matting)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob nocaseglob

          FPS="${{ inputs.FPS }}"
          LIMIT="${{ inputs.MAX_FILES }}"
          CLOSE="${{ inputs.CLOSE_PASSES }}"
          ERODE="${{ inputs.ERODE_PASSES }}"
          FEATHER="${{ inputs.FEATHER }}"

          # Thu thập file theo pattern
          files=(INPUT/*.mp4 INPUT/*.mov INPUT/*.mkv INPUT/*.avi INPUT/*.webm)
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::Không tìm thấy video trong INPUT/."
            exit 1
          fi

          # Sắp xếp theo tên (case-insensitive), lấy MAX_FILES đầu nếu có
          if [ -z "$LIMIT" ] || [ "$LIMIT" = "0" ]; then
            mapfile -t ordered < <(printf '%s\n' "${files[@]}" | sort -f)
          else
            mapfile -t ordered < <(printf '%s\n' "${files[@]}" | sort -f | head -n "$LIMIT")
          fi

          echo "[INFO] Sẽ xử lý lần lượt ${#ordered[@]} file:"
          printf ' - %s\n' "${ordered[@]}"

          for SRC in "${ordered[@]}"; do
            echo
            echo "======== PROCESS: $SRC ========"

            STEM="$(basename "${SRC%.*}")"
            TMP=".work/${STEM}.mov"
            OUT_MP4="OUT/${STEM}.mp4"

            echo "[STEP] Remove BG → RGBA (u2net_human_seg + alpha-matting)"
            if ! backgroundremover -i "$SRC" -fr "$FPS" -m u2net_human_seg -a -tv -o "$TMP"; then
              echo "::error::BackgroundRemover lỗi ở file: $SRC"
              continue
            fi

            # Feather alpha (boxblur chỉ trên kênh alpha)
            if [ "$FEATHER" -eq 0 ]; then
              BLUR_ALPHA="boxblur=0:1:0:1:0:1"
            else
              BLUR_ALPHA="boxblur=0:1:0:1:${FEATHER}:1"
            fi

            # Chuỗi đóng lỗ (CLOSE = dilation→erosion) và co viền (ERODE = erosion)
            MORPH=""
            if [ "$CLOSE" -gt 0 ]; then
              for _ in $(seq 1 "$CLOSE"); do MORPH="${MORPH}dilation,erosion,"; done
            fi
            if [ "$ERODE" -gt 0 ]; then
              for _ in $(seq 1 "$ERODE"); do MORPH="${MORPH}erosion,"; done
            fi
            MORPH="${MORPH%,}"

            # Filter graph: tách alpha → feather → (close/erode) → ghép alpha → overlay nền XANH (lime)
            FG="[1:v]format=rgba,split=2[vid][a];[a]alphaextract,${BLUR_ALPHA}"
            if [ -n "$MORPH" ]; then
              FG="${FG},${MORPH}"
            fi
            FG="${FG}[am];[vid][am]alphamerge[fg];[0:v][fg]scale2ref[bg][fg2];[bg][fg2]overlay=shortest=1"

            echo "[STEP] Flatten → MP4 (green bg, no-audio) – filter_complex:"
            echo "$FG"

            # Nền xanh sáng #00FF00 (lime) để dễ key
            if ! ffmpeg -y -hide_banner -loglevel error \
              -f lavfi -i color=c=lime:s=16x16:d=999999 \
              -i "$TMP" \
              -filter_complex "$FG" \
              -an -c:v libx264 -pix_fmt yuv420p "$OUT_MP4"; then
              echo "::error::FFmpeg lỗi (flatten) ở file: $SRC"
              rm -f "$TMP"
              continue
            fi

            rm -f "$TMP"
            echo "[OK] Done: $OUT_MP4"
          done

          echo
          echo "[INFO] Hoàn tất. Kết quả ở thư mục OUT/"

      - name: List outputs
        run: |
          ls -lh OUT/ || true

      - name: Upload OUT/*.mp4
        uses: actions/upload-artifact@v4
        with:
          name: out-green-noaudio-batch
          path: OUT/*.mp4
